// -*- mode: groovy; coding: utf-8 -*-
buildscript {
  repositories {
    mavenLocal()
    maven { url "${developLibUrl}" }
    jcenter()
    
    // サードパーティ製ライブラリの格納リポジトリ
    if(project.hasProperty('nablarchExtRepoUrl')) {
       maven { url "${nablarchExtRepoUrl}" }
     }

  }
  dependencies {
    classpath "com.nablarch.dev:nablarch-gradle-plugin:${nablarchGradlePluginVersion}"
  }
}

subprojects {
  group = 'com.nablarch.configuration'

  repositories {
    mavenLocal()
    maven { url "${developLibUrl}" }
    jcenter()
    
    // サードパーティ製ライブラリの格納リポジトリ
    if(project.hasProperty('nablarchExtRepoUrl')) {
       maven { url "${nablarchExtRepoUrl}" }
     }
  
  }

  apply plugin: 'com.nablarch.dev.nablarch-build'
  apply plugin: 'com.nablarch.dev.nablarch-maven-deploy'

  // ビルド時のJavaバージョンを指定する
  sourceCompatibility=JavaVersion.VERSION_1_6
  targetCompatibility=JavaVersion.VERSION_1_6

  configurations {
    toolbox
  }

  dependencies {
    toolbox 'com.nablarch.tool:nablarch-toolbox:1.0.2'
    testCompile 'com.nablarch.profile:nablarch-all-in-one:5u6'
    testCompile 'com.nablarch.framework:nablarch-testing:1.0.6'
    testCompile('com.nablarch.tool:nablarch-toolbox:1.0.2') {
      exclude module: 'nablarch-all-in-one'
    }
    //testCompile (group: 'com.nablarch.framework', name: 'nablarch-backward-compatibility', version: '1.0.1')
    testCompile 'com.oracle:ucp:11.2.0.3.0'
    testCompile 'com.oracle:ojdbc6:11.2.0.2.0'

    testRuntime(
            'javax.servlet:servlet-api:2.5',
            'javax.servlet.jsp:jsp-api:2.1',
            'javax.jms:jms-api:1.1-rev-1',
            'taglibs:standard:1.1.2',
            'com.oracle:ojdbc6:11.2.0.2.0',
            'com.oracle:ucp:11.2.0.3.0'
    )
  }

  task genConfigForTest(type: JavaExec, dependsOn: [processTestResources, processResources]) {
    description 'アプリケーション設定一覧からテスト用の環境設定ファイルを出力する。'
    main = 'nablarch.tool.configgenerator.Main'
    classpath = configurations.toolbox + sourceSets.test.runtimeClasspath
    jvmArgs = ['-DoutputBaseDir=src/test/resources']
    args = ['画面オンライン', '開発環境']
  }

  task genConfigForMain(type: JavaExec, dependsOn: [processTestResources, processResources]) {
    description 'アプリケーション設定一覧から本番用の環境設定ファイルを出力する。'
    main = 'nablarch.tool.configgenerator.Main'
    classpath = configurations.toolbox + sourceSets.test.runtimeClasspath
    jvmArgs = ['-DoutputBaseDir=src/test/resources', '-Dfile.encoding=MS932']
    args = ['画面オンライン', '本番環境']
  }

}

task wrapper(type: Wrapper) {
  gradleVersion = '2.12'
}
